print("This is a code block!")
getwd()
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("C:\Users\Owner\Documents\USC\Senior Year\qbio490\qbio_490_sonia"))
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/Owner/Documents/USC/Senior Year/qbio490/qbio_490_sonia"))
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/Owner/Documents/USC/Senior Year/qbio490/qbio_490_sonia"))
## Create a new variable my_var to store anything you choose:
my_var <- c("hello", "hi", "hey")
print(my_var)
var_string <- "hello world!"
var_num <- 23
var_vector <- c(3, 2, 1)
my_var <- c("hello", "hi", "hey")
print(my_var)
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- 1
false_var <- 0
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- TRUE
1
true_var <- TRUE
false_var <- FALSE
negative <- -5
decimal <- 0.5
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- TRUE
false_var <- FALSE
## numeric is a catch all for any number value in R
negative <- -5
decimal <- 0.5
## a string is any text value
## strings can be enclosed in single or double quote
string_var <- "hi my name is sonia"
char_var <- 's'
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c(1, 2, 3)
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
help(factor)
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c("Sagittarius", "Scorpio", "Capricorn")
factor <- factor(vector, levels = c(
"Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo",
"Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"))
factor
sort(factor)
## add code here!
name <- "Sonia"
age <- 22
birthday <- "12/16/2001"
three_fav_colors <- c("orange", "deepskyblue", "palegreen")
```
three_fav_colors <- c("orange", "deepskyblue", "palegreen")
typeof(name)
typeof(age)
typeof(birthday)
typeof(three_fav_colors)
## add code here!
name <- "Sonia" # string
age <- 22 # numeric
birthday <- "12/16/2001" # string
three_fav_colors <- c("orange", "deepskyblue", "palegreen") # vector
name
age
birthday
three_fav_colors
sum(3, 4, 5) ## calling the function without saving the output automatically prints to the console
max_value <- max(1, 10, 100) ## storing to a variable does not automatically print
max_value
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
## call functions here
sum(list_of_numbers)
min(list_of_numbers)
mean(list_of_numbers)
mode(list_of_numbers)
summary(list_of_numbers)
help(mode)
mode(name)
typeof(name)
mode(age)
typeof(age)
typeof(list_of_numbers)
"QBIO" == "QBIO" ## is equal to
"USC" != "UCLA" ## is not equal to
10 > 9 ## greater than
1 < 2 ## less than
8 >= 3 ## greater than or equal to
4 <= 7 ## less than or equal to
100 %in% c(10, 100, 1000, 10000) ## is present in a vector/list
"cat" == "cat" & "dog" == "dog" # prediction: TRUE
"cat" == "cat" & "fish" == "hamster" # prediction: FALSE
1 < 2 | 3 < 1 # prediction: TRUE
1 < 2 | 3 < 5 # prediction: TRUE
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
if (1 > 5) {
print("Fail!")
} else if (5 > 1) {
print("Success!")
} else {
print("Fail!")
}
new_list <- c("starbucks", "elephant", 232, "magenta", -10)
if (7.5 %in% new_list) {
print("A")
if (!7.5 %in% new_list) {
print ("B")
}
} else if  (!(232 %in% new_list)) {
print("C")
} else if ("starbucks" %in% new_list &! 9 > 10) {
print("D")
if (100 < 1 | "elephant" %in% new_list) {
print("E")
}
else if ("magenta" %in% new_list) {
print("F")
}
} else {
print("G")
}
# prediction: DE
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean !> 10) {
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
print(mean(my_list))
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean = mean(1, 10, x)
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean = mean(1, 10, x)
print(mean)
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean <- mean(my_list)
print(mean)
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean <- mean(c(1, 10, x))
print(mean)
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
print(mean(c(1, 10, x)))
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean <- mean(c(1, 10, x))
print(mean)
x = x + 1
}
help(pow)
help(^)
list <- c(1, 5, 20, 0)
# write loop here
for(element in list) {
print(element ^ 3)
}
# write loop here
for (i in -7:7) {
print(i)
}
typeof(name)
mode(name)
typeof(age)
mode(age)
typeof(birthday)
mode(birthday)
typeof(three_fav_colors)
mode(three_fav_colors)
loop_sum <- function(vector) { # here, I created a user-defined function that sums up the elements in "vector" using a loop
x=0
for (i in vector) {
x = x + i
}
return(x)
}
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
data(mtcars)
View(mtcars)
head(mtcars) # just like in the terminal, you can use head to view the first few rows of a data frame
str(mtcars) # str stands for structure
# add code here
mtcars$mpg
# call functions here
colnames(mtcars)
rownames(mtcars)
# call functions here
colnames(mtcars)
rownames(mtcars)
# call functions here
colnames(mtcars)
mtcars$carb # fill in name of carburetor column here
mtcars[2, 4] # access the value from the second row, fourth column (this is the horsepower of a Mazda RX4 Wag)
mtcars[1,  ] # access all values in the first row (all info on the Mazda RX4)
mtcars[ , 1] # access all values in the first column (mpg info for all cars)
mtcars[1:5, c(1, 4, 6)] # rows one through five and columns 1, 4, and 6
mtcars[-(3:30), ] # access everything EXCEPT rows 3 through 30
mtcars[ , c(-(1:4), -6)] # access everything EXCEPT columns 1 through 4 and column 6
mtcars["Duster 360" , "mpg"] # select the mpg (column) for only Duster 360 (row)
```
mtcars[2, 4] # access the value from the second row, fourth column (this is the horsepower of a Mazda RX4 Wag)
mtcars[1,  ] # access all values in the first row (all info on the Mazda RX4)
mtcars[ , 1] # access all values in the first column (mpg info for all cars)
mtcars[1:5, c(1, 4, 6)] # rows one through five and columns 1, 4, and 6
mtcars[-(3:30), ] # access everything EXCEPT rows 3 through 30
mtcars[ , c(-(1:4), -6)] # access everything EXCEPT columns 1 through 4 and column 6
mtcars["Duster 360" , "mpg"] # select the mpg (column) for only Duster 360 (row)
# write code here
mtcars$hp["Duster 360", "Lincoln Continental", "Maserati Bora"]
# write code here
mtcars$hp[c("Duster 360", "Lincoln Continental", "Maserati Bora")]
# write code here
mtcars[c("Duster 360", "Lincoln Continental", "Maserati Bora"), "hp"]
# write code here
mtcars$transmission <- ifelse(mtcars$am == 0, "automatic", "manual")
# write code here
colnames(mtcars)
mtcars_no_am <- mtcars[:, -9]
mtcars_no_am <- mtcars[, -9]
View(mtcars_no_am)
# write code here
str(mtcars_no_am)
args(sum)
# write code here
help(is.na())
# write code here
help(is.na)
args(is.na)
if (!require(swirl)){
install.packages("swirl")
}
library(swirl)
